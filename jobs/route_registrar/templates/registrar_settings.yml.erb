<%=
  require 'json'

  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end
  my_ip = discover_external_ip

  nats_ips = nil
  if_p('nats.machines') do |ips|
    nats_ips = ips.compact
  end.else do
    nats_ips = link('nats').instances.map { |instance| instance.address }
  end

  nats_port = nil
  if_p('nats.port') do |prop|
    nats_port = prop
  end.else do
    nats_port = link('nats').p("nats.port")
  end

  nats_user = nil
  if_p('nats.user') do |prop|
    nats_user = prop
  end.else do
    nats_user = link('nats').p("nats.user")
  end

  nats_password = nil
  if_p('nats.password') do |prop|
    nats_password = prop
  end.else do
    nats_password = link('nats').p("nats.password")
  end

  message_bus_servers = nats_ips.map do |ip|
    {
      host: "#{ip}:#{nats_port}",
      user: "#{nats_user}",
      password: "#{nats_password}"
    }
  end

  routes = p('route_registrar.routes')

  routes.each do |route|
    if route['prepend_instance_index']
      route['uris'].map! { |uri| "#{spec.index}-#{uri}" }
    end
  end

  config = {
    message_bus_servers: message_bus_servers,
    host: my_ip,
    routes: routes,
  }
  JSON.pretty_generate(config)
%>
