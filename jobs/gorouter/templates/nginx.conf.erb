user vcap;
worker_processes  4;
worker_rlimit_nofile 30000;

error_log /var/vcap/sys/log/nginx_gorouter/nginx.error.log;
pid       /var/vcap/sys/run/nginx_gorouter/nginx.pid;

events {
    worker_connections  19000;
    use epoll;
    # multi_accept on;
}

http {
    include       mime.types;
    access_log    /var/vcap/sys/log/nginx_gorouter/access.log;

    log_format main  '$host - [$time_local] '
                     '"$request" $status $bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     '"$remote_addr" response_time:$upstream_response_time $upstream_cache_status "$http_x_forwarded_proto" '
                     '$request_time "$http_x_lb_forwarded_for"';

    default_type  text/html;

    sendfile           on;
    tcp_nopush         on;
    tcp_nodelay        on;

    keepalive_timeout  15 10;

    # Turning this on seems to want to break the etag headers. Disable for now.
    #gzip  on;
    #gzip_min_length    1250;
    #gzip_buffers       16 8k;
    #gzip_comp_level    2;
    #gzip_proxied       any;
    #gzip_types         text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    #gzip_vary          on;
    #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    client_max_body_size 1024M;

    client_body_temp_path /var/vcap/data/nginx/tmp/client_body_temp;
    fastcgi_temp_path     /var/vcap/data/nginx/tmp/fastcgi_temp;
    uwsgi_temp_path       /var/vcap/data/nginx/tmp/uwsgi_temp;
    scgi_temp_path        /var/vcap/data/nginx/tmp/scgi_temp;

    proxy_cache_path  /var/vcap/sys/gorouter_nginx-cache levels=1:2 keys_zone=server:8m max_size=512m inactive=600m;
    proxy_temp_path /var/vcap/sys/gorouter_nginx-tmp;

    upstream vcap_router {
      server  localhost:<%= p("router.port") %>;
    }

    server {
        listen       *:80;
        server_name  "vcap.me";

        keepalive_timeout  15 10;

        access_log   /var/vcap/sys/log/nginx_gorouter/vcap.access.log main;
        server_name_in_redirect off;
        server_tokens off;

        set $test "";

        <% p("router.internal_only_patterns").each do |pattern| %>
        if ($host ~ <%= pattern %>)
        {
          set $test P;
        }
        <% end %>

        set $internal "";
        if ($http_x_lb_forwarded_for ~ ^(127\.0\.0\.1|10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.|192\.168\.))
        {
          set $internal Y;
        }

        <% p("router.extra_internal_ips").each do |pattern| %>
        if ($http_x_lb_forwarded_for ~ <%= pattern %>)
        {
          set $internal Y;
        }
        <% end %>

        if ($internal != Y)
        {
          set $test "${test}E";
        }

        if ($test = PE)
        {
          return 405;
        }


        set $nocache "0";
        if ($args ~ nocache=true) {
            set $nocache "1";
        }

        location / {
                proxy_no_cache                  $nocache;
                proxy_cache_bypass              $nocache;

                proxy_cache                     server;
                proxy_cache_key                 "$scheme$request_method$host$request_uri$is_args$args";
                proxy_buffering                 on;
                proxy_buffer_size               8k;
                proxy_buffers                   2048 8k;
                add_header                      X-Proxy-Cache $upstream_cache_status always;
                proxy_set_header                Host $http_host;
                proxy_set_header                Upgrade $http_upgrade;
                proxy_set_header                Connection $http_connection;
                # we may have to add all the e-tag headers here. Damn nginx.
                proxy_set_header                If-Match $http_if_match;
                proxy_http_version              1.1;
                proxy_redirect                  off;
                proxy_connect_timeout           600;
                proxy_send_timeout              600;
                proxy_read_timeout              600;
                proxy_pass                      http://vcap_router;
        }
    }
}
