#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/tcp_router
LOG_DIR=/var/vcap/sys/log/tcp_router
CONF_DIR=/var/vcap/jobs/tcp_router/config
PIDFILE=$RUN_DIR/tcp_router.pid

HAPROXY_PID_FILE=/var/vcap/sys/run/tcp_router/haproxy.pid

PATH=/var/vcap/packages/haproxy/bin:$PATH
NAME=tcp_router
DAEMON=$(which haproxy)
CONFIG=/var/vcap/jobs/tcp_router/config/haproxy.conf
DESC="HAProxy"
USER=vcap

TIMESTAMP=$(which date)

source /var/vcap/packages/routing_utils/pid_utils.sh
source /var/vcap/packages/routing_utils/syslog_utils.sh

function setup_environment() {
  mkdir -p "${RUN_DIR}"
}


test -x "${DAEMON}"
test -f "${CONFIG}"

RETVAL=0

remove_haproxy_pid() {
    rm -f "${HAPROXY_PID_FILE}"
}

start_haproxy() {
    status_haproxy
    if [ "${RETVAL}" = 0 ]; then
        echo "HAProxy is currently running"
    else
        RETVAL=0
        echo "$("${TIMESTAMP}"): Starting HAProxy"
        set +e
        "${DAEMON}" -f "${CONFIG}" -D -p "${HAPROXY_PID_FILE}" 0<&-
        RETVAL=$?
        set -e
        case "${RETVAL}" in
            0)
                echo "$("${TIMESTAMP}"): Successfully started HAProxy"
                ;;
            *)
                echo "$("${TIMESTAMP}"): Errored starting HAProxy"
                echo "$("${TIMESTAMP}"): Errored starting HAProxy" >&2
                echo "$("${TIMESTAMP}"): Removing stale PID file for HAProxy"
                remove_haproxy_pid
                echo "FAILED - check logs"
                RETVAL=1
                ;;
        esac
    fi
}

stop_haproxy() {
    status_haproxy
    if [ "${RETVAL}" = 0 ]; then
        set +e
        for pid in $(cat "${HAPROXY_PID_FILE}"); do
            kill ${pid} || RETVAL=$?
        done
        set -e
        if [ "${RETVAL}" = 0 ]; then
            remove_haproxy_pid
        else
            echo "FAILED - check logs"
        fi
    else
        echo "HAProxy not running"
    fi
}

# RETVAL = 0 if running, != 0 if stopped
status_haproxy() {
    if [ -f "${HAPROXY_PID_FILE}" ]; then
        RETVAL=0
        set +e
        for pid in $(cat "${HAPROXY_PID_FILE}"); do
            kill -0 "${pid}" > /dev/null 2>&1 || RETVAL=3
        done
        kill -0 $(cat "${HAPROXY_PID_FILE}") > /dev/null 2>&1
        if [ $? != 0 ]; then
            RETVAL=3
        fi
        set -e
    else
        RETVAL=1
    fi
}

case $1 in

  start)
    # setup log dir
    SCRIPT=$(basename $0)
    exec 1>> $LOG_DIR/$SCRIPT.log
    exec 2>> $LOG_DIR/$SCRIPT.err.log

    tee_output_to_sys_log "${LOG_DIR}" "tcp_router"

    #Start HaProxy
    start_haproxy

    #Start tcp_router
    echo -n "Starting ${NAME}."

    set +e
    host <%= p("dns_health_check_host") %>
    if [[ "0" != "$?" ]]; then
      echo "DNS is not up"
      exit 1
    fi
    set -e

    setup_environment
    pid_guard $PIDFILE "tcp_router"

    echo $$ > $PIDFILE

    exec /var/vcap/packages/tcp_router/bin/cf-tcp-router\
      -debugAddr=<%= p("tcp_router.debug_address") %> \
      -logLevel=<%= p("tcp_router.log_level") %> \
      -tcpLoadBalancerConfig="/var/vcap/jobs/tcp_router/config/haproxy.conf" \
      -tcpLoadBalancerBaseConfig="/var/vcap/jobs/tcp_router/config/haproxy.conf.template" \
      -config=$CONF_DIR/tcp_router.yml \
      -tcpLoadBalancerStatsUnixSocket="/var/vcap/jobs/tcp_router/config/haproxy.sock" \
      -haproxyReloader="/var/vcap/jobs/tcp_router/bin/haproxy_reloader" \
      -statsCollectionInterval=<%= p("tcp_router.tcp_stats_collection_interval") %> \
      -dropsondePort=<%=p("metron.port") %>

    ;;

  stop)
    tee_output_to_sys_log "${LOG_DIR}" "tcp_router"
    # stopping tcp_router
    echo "Stopping ${NAME}."
    kill_and_wait $PIDFILE
    # stopping haproxy
    echo -n "Stopping ${DESC}: "
    stop_haproxy

    ;;
  *)
    echo "Usage: tcp_router {start|stop}"

    ;;

esac
