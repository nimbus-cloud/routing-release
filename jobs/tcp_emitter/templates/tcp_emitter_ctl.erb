#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/tcp_emitter
LOG_DIR=/var/vcap/sys/log/tcp_emitter
CONF_DIR=/var/vcap/jobs/tcp_emitter/config
PIDFILE=$RUN_DIR/tcp_emitter.pid

source /var/vcap/packages/routing_utils/pid_utils.sh
source /var/vcap/packages/routing_utils/syslog_utils.sh

<% api_location = p("bbs.api_location")
if api_location.start_with?("http://","https://")
  raise "bbs.api_location `#{api_location}` should not contain scheme in URI"
end %>

<% if p("bbs.require_ssl") %>
  bbs_sec_flags=" \
   -bbsClientCert=${CONF_DIR}/certs/bbs/client.crt \
   -bbsClientKey=${CONF_DIR}/certs/bbs/client.key \
   -bbsCACert=${CONF_DIR}/certs/bbs/ca.crt"

  bbs_api_url="<%= "https://" + p("bbs.api_location") %>"
<% else %>
  bbs_sec_flags=""
  bbs_api_url="<%= "http://" + p("bbs.api_location") %>"
<% end %>


function setup_environment() {
  mkdir -p "${RUN_DIR}"
}

case $1 in

  start)
    set +e
    host <%= p("dns_health_check_host") %>
    if [[ "0" != "$?" ]]; then
      echo "DNS is not up"
      exit 1
    fi
    set -e

    setup_environment
    pid_guard $PIDFILE "tcp_emitter"

    tee_output_to_sys_log "${LOG_DIR}" "tcp_emitter"

    echo $$ > /var/vcap/sys/run/tcp_emitter/tcp_emitter.pid

    exec /var/vcap/packages/tcp_emitter/bin/tcp-emitter ${bbs_sec_flags} \
      -lockTTL=<%= p("tcp_emitter.lock_ttl") %> \
      -lockRetryInterval=<%= p("tcp_emitter.lock_retry_interval") %> \
      -consulCluster=<%= p("consul.servers") %> \
      -bbsAddress=${bbs_api_url} \
      -debugAddr=<%= p("tcp_emitter.debug_address") %> \
      -logLevel=<%= p("tcp_emitter.log_level") %> \
      -routeTTL=<%= p("tcp_emitter.route_ttl")%> \
      -syncInterval=<%= p("tcp_emitter.sync_interval")%> \
      -config=$CONF_DIR/tcp_emitter.yml \
      -dropsondePort=<%= p("metron.port") %>

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: tcp_emitter_ctl {start|stop}"

    ;;

esac
