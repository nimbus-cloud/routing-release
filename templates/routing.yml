name: (( config_from_cf.cf_deployment_name "-routing" ))

releases:
- name: routing
  version: latest
- name: cf
  version: latest

compilation:
  network: router1
  reuse_compilation_vms: true
  workers: (( iaas_settings.compilation_workers || 6))
  cloud_properties: (( iaas_settings.compilation_cloud_properties ))

update:
  canaries: 1
  canary_watch_time: 5000-120000
  max_in_flight: 1
  serial: false
  update_watch_time: 5000-120000

networks:
- name: router1
  type: manual
  subnets: (( iaas_settings.subnet_configs.router1.subnets ))
- name: router2
  type: manual
  subnets: (( iaas_settings.subnet_configs.router2.subnets ))
- name: router3
  type: manual
  subnets: (( iaas_settings.subnet_configs.router3.subnets ))

resource_pools:
  - name: routing_api_z1
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.routing_api_z1.cloud_properties ))

  - name: routing_api_z2
    network: router2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.routing_api_z2.cloud_properties ))

  - name: routing_api_z3
    network: router3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.routing_api_z3.cloud_properties ))

  - name: tcp_router_z1
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_router_z1.cloud_properties ))

  - name: tcp_router_z2
    network: router2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_router_z2.cloud_properties ))

  - name: tcp_router_z3
    network: router3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_router_z3.cloud_properties ))

  - name: tcp_emitter_z1
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_emitter_z1.cloud_properties ))

  - name: tcp_emitter_z2
    network: router2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_emitter_z2.cloud_properties ))

  - name: tcp_emitter_z3
    network: router3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.tcp_emitter_z3.cloud_properties ))

  - name: small_errand
    network: router1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.small_errand.cloud_properties ))


jobs:
  - name: tcp_router_z1
    templates: (( base_job_templates.tcp_router ))
    instances: (( instance_count_overrides.tcp_router_z1.instances || 1 ))
    persistent_disk: (( persistent_disk_overrides.tcp_router_z1 || 1024 ))
    resource_pool: tcp_router_z1
    networks:
      - name: router1
        static_ips: (( static_ips(0) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z1
      <<: (( merge ))
  - name: tcp_router_z2
    templates: (( base_job_templates.tcp_router ))
    instances: (( instance_count_overrides.tcp_router_z2.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_router_z2 || 1024 ))
    resource_pool: tcp_router_z2
    networks:
      - name: router2
        static_ips: (( static_ips(0) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z2
      <<: (( merge ))
  - name: tcp_router_z3
    templates: (( base_job_templates.tcp_router ))
    instances: (( instance_count_overrides.tcp_router_z3.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_router_z3 || 1024 ))
    resource_pool: tcp_router_z3
    networks:
      - name: router3
        static_ips: (( static_ips(0) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z3
      <<: (( merge ))
  - name: tcp_emitter_z1
    templates: (( base_job_templates.tcp_emitter ))
    instances: (( instance_count_overrides.tcp_emitter_z1.instances || 1 ))
    persistent_disk: (( persistent_disk_overrides.tcp_emitter_z1 || 1024 ))
    resource_pool: tcp_emitter_z1
    networks:
      - name: router1
        static_ips: (( static_ips(1) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z1
  - name: tcp_emitter_z2
    templates: (( base_job_templates.tcp_emitter ))
    instances: (( instance_count_overrides.tcp_emitter_z2.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_emitter_z2 || 1024 ))
    resource_pool: tcp_emitter_z2
    networks:
      - name: router2
        static_ips: (( static_ips(1) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z2
  - name: tcp_emitter_z3
    templates: (( base_job_templates.tcp_emitter ))
    instances: (( instance_count_overrides.tcp_emitter_z3.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.tcp_emitter_z3 || 1024 ))
    resource_pool: tcp_emitter_z3
    networks:
      - name: router3
        static_ips: (( static_ips(1) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      metron_agent:
        zone: z3
  - name: routing_api_z1
    templates: (( base_job_templates.routing_api ))
    instances: (( instance_count_overrides.routing_api_z1.instances || 1 ))
    persistent_disk: (( persistent_disk_overrides.routing_api_z1 || 1024 ))
    resource_pool: routing_api_z1
    networks:
      - name: router1
        static_ips: (( static_ips(2) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          services:
            routing-api: {}
      metron_agent:
        zone: z1
  - name: routing_api_z2
    templates: (( base_job_templates.routing_api ))
    instances: (( instance_count_overrides.routing_api_z2.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.routing_api_z2 || 1024 ))
    resource_pool: routing_api_z2
    networks:
      - name: router2
        static_ips: (( static_ips(2) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          services:
            routing-api: {}
      metron_agent:
        zone: z2
  - name: routing_api_z3
    templates: (( base_job_templates.routing_api ))
    instances: (( instance_count_overrides.routing_api_z3.instances || 0 ))
    persistent_disk: (( persistent_disk_overrides.routing_api_z3 || 1024 ))
    resource_pool: routing_api_z3
    networks:
      - name: router3
        static_ips: (( static_ips(2) ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          services:
            routing-api: {}
      metron_agent:
        zone: z3
  - name: routing_acceptance_tests
    templates: (( base_job_templates.acceptance_tests_errand ))
    lifecycle: errand
    instances: (( instance_count_overrides.small_errand.instances || 1 ))
    networks:
    - name: router1
    resource_pool: small_errand
  - name: routing_smoke_tests
    templates: (( base_job_templates.smoke_tests_errand ))
    lifecycle: errand
    instances: (( instance_count_overrides.small_errand.instances || 1 ))
    networks:
    - name: router1
    resource_pool: small_errand

property_overrides: (( merge ))
iaas_settings: (( merge ))
instance_count_overrides: (( merge ))
persistent_disk_overrides: (( merge ))
config_from_cf: (( merge ))
config_from_diego: (( merge ))

meta:
  default_router_groups:
    - name: default-tcp
      type: tcp
      reservable_ports: 1024-65535

properties:
  syslog_daemon_config: (( property_overrides.syslog_daemon_config || nil ))
  metron_agent:
    deployment: (( name ))
    etcd:
      client_cert: (( config_from_cf.metron_agent.etcd.client_cert ))
      client_key: (( config_from_cf.metron_agent.etcd.client_key ))
  metron_endpoint:
    shared_secret: (( config_from_cf.metron_endpoint.shared_secret ))
  loggregator:
    etcd:
      machines: (( config_from_cf.loggregator.etcd.machines ))
      ca_cert: (( config_from_cf.loggregator.etcd.ca_cert ))
      require_ssl: (( config_from_cf.loggregator.etcd.require_ssl ))
    tls:
      ca_cert: (( config_from_cf.loggregator.tls.ca_cert ))
      metron:
        cert: (( config_from_cf.loggregator.tls.metron.cert ))
        key: (( config_from_cf.loggregator.tls.metron.key ))
      statsd_injector:
        cert: (( config_from_cf.loggregator.tls.statsd_injector.cert ))
        key: (( config_from_cf.loggregator.tls.statsd_injector.key ))
  consul:
    agent:
      domain: (( config_from_cf.consul.domain ))
      log_level: (( config_from_cf.consul.log_level ))
      servers:
        lan: (( config_from_cf.consul.lan_servers ))
    ca_cert: (( config_from_cf.consul.ca_cert ))
    agent_cert: (( config_from_cf.consul.agent_cert ))
    agent_key: (( config_from_cf.consul.agent_key ))
    encrypt_keys: (( config_from_cf.consul.encrypt_keys ))
    require_ssl: (( config_from_cf.consul.require_ssl ))
    server_cert: (( config_from_cf.consul.server_cert ))
    server_key: (( config_from_cf.consul.server_key ))
  routing_api:
    auth_disabled: (( property_overrides.routing_api.auth_disabled || false ))
    log_level: (( property_overrides.routing_api.log_level || nil ))
    system_domain: (( config_from_cf.system_domain ))
    router_groups: (( property_overrides.routing_api.router_groups || meta.default_router_groups))
    max_ttl: (( property_overrides.routing_api.max_ttl || nil ))
    lock_retry_interval: (( property_overrides.tcp_emitter.lock_retry_interval || nil ))
    lock_ttl: (( property_overrides.tcp_emitter.lock_ttl || nil ))
    etcd:
      servers: (( property_overrides.routing_api.etcd.servers || nil ))
      ca_cert: (( property_overrides.routing_api.etcd.ca_cert || nil ))
      client_cert: (( property_overrides.routing_api.etcd.client_cert || nil ))
      client_key: (( property_overrides.routing_api.etcd.client_key || nil ))
      require_ssl: (( property_overrides.routing_api.etcd.require_ssl || nil ))
    port: (( property_overrides.routing_api.port || nil ))
    sqldb:
      host: (( property_overrides.routing_api.sqldb.host || config_from_cf.databases.address ))
      port: (( property_overrides.routing_api.sqldb.port || config_from_cf.databases.port ))
      type: (( property_overrides.routing_api.sqldb.type || config_from_cf.databases.db_scheme ))
      username: (( property_overrides.routing_api.sqldb.username || nil ))
      password: (( property_overrides.routing_api.sqldb.password || nil ))
      schema: (( property_overrides.routing_api.sqldb.schema || nil ))
    uri:  (( property_overrides.routing_api.uri || nil ))
    locket:
      api_location: (( config_from_diego.locket.api_location ))
      ca_cert: (( config_from_diego.locket.ca_cert ))
      client_key: (( config_from_diego.locket.client_key ))
      client_cert: (( config_from_diego.locket.client_cert ))
    skip_consul_lock: (( config_from_diego.skip_consul_lock  ))
  tcp_router:
    debug_address: (( property_overrides.tcp_router.debug_address ))
    tcp_stats_collection_interval: (( property_overrides.tcp_router.tcp_stats_collection_interval ))
    oauth_secret: (( config_from_cf.uaa.clients.tcp_router.secret ))
    log_level: (( property_overrides.tcp_router.log_level || nil ))
    request_timeout_in_seconds: (( property_overrides.tcp_router.request_timeout_in_seconds || 300 ))
    health_check_port: (( property_overrides.tcp_router.health_check_port || nil ))
    router_group: (( property_overrides.tcp_router.router_group || "default-tcp" ))
  tcp_emitter:
    bbs:
      client_cert: (( property_overrides.tcp_emitter.bbs.client_cert ))
      client_key: (( property_overrides.tcp_emitter.bbs.client_key ))
    debug_address: (( property_overrides.tcp_emitter.debug_address ))
    log_level: (( property_overrides.tcp_emitter.log_level || nil ))
    oauth_secret: (( config_from_cf.uaa.clients.tcp_emitter.secret ))
    lock_ttl: (( property_overrides.tcp_emitter.lock_ttl || nil ))
    sync_interval: (( property_overrides.tcp_emitter.sync_interval || nil ))
    route_ttl: (( property_overrides.tcp_emitter.route_ttl || nil ))
    lock_retry_interval: (( property_overrides.tcp_emitter.lock_retry_interval || nil ))
  skip_ssl_validation: (( property_overrides.skip_ssl_validation || nil ))
  bbs:
    api_location: (( "bbs.service.cf.internal:8889" ))
    ca_cert: (( config_from_diego.bbs.ca_cert ))
    require_ssl: (( config_from_diego.bbs.require_ssl || nil ))
  uaa:
    ca_cert: (( config_from_cf.uaa.ca_cert ))
    tls_port: (( config_from_cf.uaa.ssl.port ))
    token_endpoint: (( property_overrides.uaa.token_endpoint || nil ))
  statsd_injector:
    deployment: (( config_from_cf.statsd_injector.deployment ))
  acceptance_tests:
    addresses: (( property_overrides.acceptance_tests.addresses ))
    include_http_routes: (( property_overrides.acceptance_tests.include_http_routes ))
    system_domain: (( config_from_cf.system_domain ))
    skip_ssl_validation: (( config_from_cf.acceptance_tests.skip_ssl_validation ))
    verbose: (( property_overrides.acceptance_tests.verbose || nil ))
    tcp_router_group: (( property_overrides.acceptance_tests.tcp_router_group || nil ))
    cloud_controller:
      apps_domain: (( config_from_cf.acceptance_tests.apps_domain ))
      api: (( config_from_cf.acceptance_tests.api ))
      admin_user: (( config_from_cf.acceptance_tests.admin_user ))
      admin_password: (( config_from_cf.acceptance_tests.admin_password ))
      use_http: (( config_from_cf.acceptance_tests.use_http ))
    default_timeout: (( property_overrides.acceptance_tests.default_timeout ))
    user_password: (( property_overrides.acceptance_tests.user_password || nil ))
  smoke_tests:
    tcp_apps_domain: (( property_overrides.smoke_tests.tcp_apps_domain || nil ))

base_job_templates:
  routing_api:
    - name: consul_agent
      release: cf
      consumes:
        consul: nil
    - name: routing-api
      release: routing
    - name: metron_agent
      release: cf
    - name: statsd_injector
      release: cf
  tcp_router:
    - name: consul_agent
      release: cf
      consumes:
        consul: nil
    - name: tcp_router
      release: routing
    - name: metron_agent
      release: cf
  tcp_emitter:
    - name: consul_agent
      release: cf
      consumes:
        consul: nil
    - name: tcp_emitter
      release: routing
    - name: metron_agent
      release: cf
  acceptance_tests_errand:
    - name: acceptance_tests
      release: routing
    - name: consul_agent
      release: cf
      consumes:
        consul: nil
  smoke_tests_errand:
    - name: smoke_tests
      release: routing
    - name: consul_agent
      release: cf
      consumes:
        consul: nil
